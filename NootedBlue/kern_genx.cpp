//  Copyright Â© 2023 ChefKiss Inc. Licensed under the Thou Shalt Not Profit License version 1.0. See LICENSE for
//  details.
#include "kern_Genx.hpp"
#include <Headers/kern_api.hpp>
#include "kern_Gen11.hpp"

static const char *pathG11FB0 = "/Library/Extensions/AppleIntelICLLPGraphicsFramebuffer.kext/Contents/MacOS/"
                               "AppleIntelICLLPGraphicsFramebuffer";

static KernelPatcher::KextInfo kextG11FB0 {"com.xxxxx.driver.AppleIntelICLLPGraphicsFramebuffer", &pathG11FB0, 1, {}, {},
    KernelPatcher::KextInfo::Unloaded};


Genx *Genx::callback = nullptr;

void Genx::init() {
	callback = this;
    lilu.onKextLoadForce(&kextG11FB0);

}



bool Genx::processKext(KernelPatcher &patcher, size_t index, mach_vm_address_t address, size_t size) {

    if (kextG11FB0.loadIndex == index) {
		NBlue::callback->setRMMIOIfNecessary();
		
		SolveRequestPlus solveRequests[] = {
			

			/*{"__ZN15ApppeIntelPlane10gMetaClassE", NBlue::callback->metaClassMap[0][0]},
			{"__ZN16ApppeIntelScaler10gMetaClassE", NBlue::callback->metaClassMap[1][0]},
			{"__ZN21ApppeIntelDisplayPath10gMetaClassE", NBlue::callback->metaClassMap[2][0]},
			{"__ZN30ApppeIntelDisplaySimController10gMetaClassE", NBlue::callback->metaClassMap[3][0]},*/
			
			/*{"__ZN14ApppeIntelPort10gMetaClassE", NBlue::callback->metaClassMap[0][1]},
			{"__ZN17ApppeIntelPortHAL10gMetaClassE", NBlue::callback->metaClassMap[1][1]},
			{"__ZN22ApppeIntelPortHALDiags10gMetaClassE", NBlue::callback->metaClassMap[2][1]},
			{"__ZN19ApppeIntelPowerWell10gMetaClassE", NBlue::callback->metaClassMap[3][1]},*/
			

			
			//{"__ZN16ApppeIntelScaler13disableScalerEb",this->disableScaler0},
			
			
			//__ZN26AppleIntelFramebufferDiags10gMetaClassE
			
		};
		//PANIC_COND(!SolveRequestPlus::solveAll(patcher, index, solveRequests, address, size), "nblue",	"genx Failed to resolve symbols");
		
		RouteRequestPlus requests[] = {
			
			//{"__ZN31AppleIntelFramebufferController5startEP9IOService",start,	this->ostart},
			//{"__ZN24AppleIntelBaseController5probeEP9IOServicePi",wprobe,	this->owprobe},
			{"__ZN20IntelFBClientControl11doAttributeEjPmmS0_S0_P25IOExternalMethodArguments",wrapFBClientDoAttribute,	this->orgFBClientDoAttribute},
			{"__ZN21AppleIntelFramebuffer18prepareToEnterWakeEv",dovoid},
			{"__ZN21AppleIntelFramebuffer17prepareToExitWakeEv",dovoid},
			{"__ZN21AppleIntelFramebuffer18prepareToExitSleepEv",dovoid},
			{"__ZN21AppleIntelFramebuffer19prepareToEnterSleepEv",dovoid},
			
			{"__ZN24AppleIntelBaseController11hwSaveNVRAMEv",hwSaveNVRAM},
			{"__ZN14AppleIntelPort14getBuiltInPortEv",hwSaveNVRAM},
			{"__ZN24AppleIntelBaseController15hwSetPanelPowerEj",dovoid},
			
		};
		PANIC_COND(!RouteRequestPlus::routeAll(patcher, index, requests, address, size), "nblue","genx Failed to route symbols");
		
		//connectors
		static const uint8_t f1[] = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
			0x02, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0xC1, 0x02, 0x00, 0x00,
			0x03, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0xC1, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
		
		static const uint8_t r1[] = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

		//hwreg
		static const uint8_t f2[]= {0x74, 0x62, 0x48, 0xff, 0x05, 0x13, 0x71, 0x10, 0x00, 0xbf, 0x04, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x00, 0x00, 0x00};
		static const uint8_t r2[]= {0xeb, 0x62, 0x48, 0xff, 0x05, 0x13, 0x71, 0x10, 0x00, 0xbf, 0x04, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x00, 0x00, 0x00};
		
		//pipe
		static const uint8_t f3[]= {0x74, 0x36, 0x48, 0xff, 0x05, 0x52, 0xdc, 0x09, 0x00, 0x44, 0x89, 0x3c, 0x24, 0x48, 0x8d, 0x15, 0xc2, 0x04, 0x04, 0x00, 0x4c, 0x8d, 0x05, 0x9f, 0x06, 0x04, 0x00};
		static const uint8_t r3[]= {0xeb, 0x36, 0x48, 0xff, 0x05, 0x52, 0xdc, 0x09, 0x00, 0x44, 0x89, 0x3c, 0x24, 0x48, 0x8d, 0x15, 0xc2, 0x04, 0x04, 0x00, 0x4c, 0x8d, 0x05, 0x9f, 0x06, 0x04, 0x00};
		
		LookupPatchPlus const patches[] = {
			{&kextG11FB0, f1, r1, arrsize(f1),	1},
			{&kextG11FB0, f2, r2, arrsize(f2),	1},
			{&kextG11FB0, f3, r3, arrsize(f3),	1},
		};

		PANIC_COND(!LookupPatchPlus::applyAll(patcher, patches , address, size), "nblue", "vent Failed to apply patches!");
		
		
		
		
        DBGLOG("nblue", "Loaded ApppeIntelICLLPGraphicsFramebuffer!");
        return true;
		
    }

    return false;
}

uint32_t Genx::hwSaveNVRAM()
{
	return 0;

}

bool Genx::start(void *that,void  *param_1)
{
	return false;

}
void * Genx::wprobe(void *that,void *param_1,int *param_2)
{
	return that;
}

void Genx::dovoid()
{
	
	
}
IOReturn Genx::wrapFBClientDoAttribute(void *fbclient, uint32_t attribute, unsigned long *unk1, unsigned long unk2, unsigned long *unk3, unsigned long *unk4, void *externalMethodArguments) {
	if (attribute == 0x923) {
		return kIOReturnUnsupported;
	}
	
	return FunctionCast(wrapFBClientDoAttribute, callback->orgFBClientDoAttribute)(fbclient, attribute, unk1, unk2, unk3, unk4, externalMethodArguments);
}
