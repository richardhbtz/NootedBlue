//! Copyright Â© 2022-2023 ChefKiss Inc. Licensed under the Thou Shalt Not Profit License version 1.5.
//! See LICENSE for details.

#pragma once
#include <Headers/kern_patcher.hpp>
#include <Headers/kern_util.hpp>

class DYLDPatch {
    const void *find {nullptr}, *findMask {nullptr};
    const void *replace {nullptr}, *replaceMask {nullptr};
    const size_t size {0};
    const char *comment {nullptr};

    public:
    DYLDPatch(const void *find, const void *replace, size_t size, const char *comment)
        : find {find}, replace {replace}, size {size}, comment {comment} {}

    DYLDPatch(const void *find, const void *findMask, const void *replace, const void *replaceMask, size_t size,
        const char *comment)
        : find {find}, findMask {findMask}, replace {replace}, replaceMask {replaceMask}, size {size},
          comment {comment} {}

    DYLDPatch(const void *find, const void *findMask, const void *replace, size_t size, const char *comment)
        : find {find}, findMask {findMask}, replace {replace}, size {size}, comment {comment} {}

    template<typename T, size_t N>
    DYLDPatch(const T (&find)[N], const T (&replace)[N], const char *comment)
        : DYLDPatch(find, replace, N * sizeof(T), comment) {}

    template<typename T, size_t N>
    DYLDPatch(const T (&find)[N], const T (&findMask)[N], const T (&replace)[N], const T (&replaceMask)[N],
        const char *comment)
        : DYLDPatch(find, findMask, replace, replaceMask, N * sizeof(T), comment) {}

    template<typename T, size_t N>
    DYLDPatch(const T (&find)[N], const T (&findMask)[N], const T (&replace)[N], const char *comment)
        : DYLDPatch(find, findMask, replace, N * sizeof(T), comment) {}

    inline void apply(void *data, size_t size) const {
        if (UNLIKELY(KernelPatcher::findAndReplaceWithMask(data, size, this->find, this->size, this->findMask,
                this->findMask ? this->size : 0, this->replace, this->size, this->replaceMask,
                this->replaceMask ? this->size : 0))) {
            DBGLOG("DYLD", "Applied '%s' patch", this->comment);
        }
    }

    static inline void applyAll(const DYLDPatch *patches, size_t count, void *data, size_t size) {
        for (size_t i = 0; i < count; i++) { patches[i].apply(data, size); }
    }

    template<size_t N>
    static inline void applyAll(const DYLDPatch (&patches)[N], void *data, size_t size) {
        applyAll(patches, N, data, size);
    }
};

class DYLDPatches {
    public:
    static DYLDPatches *callback;

    void init();
    void processPatcher(KernelPatcher &patcher);

    private:
    static void apply(char *path, void *data, size_t size);

    mach_vm_address_t orgCsValidatePage {0};
    static void wrapCsValidatePage(vnode *vp, memory_object_t pager, memory_object_offset_t page_offset,
        const void *data, int *validated_p, int *tainted_p, int *nx_p);
};

//! VideoToolbox DRM model check
static const char kVideoToolboxDRMModelOriginal[] = "MacPro5,1\0MacPro6,1\0IOService";

static const char kHwGvaId[] = "Mac-7BA5B2D9E42DDD94";

//! AppleGVA model check
static const char kAGVABoardIdOriginal[] = "board-id\0hw.model";
static const char kAGVABoardIdPatched[] = "hwgva-id\0hw.model";

static const char kCoreLSKDMSEPath[] = "/System/Library/PrivateFrameworks/CoreLSKDMSE.framework/Versions/A/CoreLSKDMSE";
static const char kCoreLSKDPath[] = "/System/Library/PrivateFrameworks/CoreLSKD.framework/Versions/A/CoreLSKD";

static const UInt8 kCoreLSKDOriginal[] = {0xC7, 0xC0, 0x01, 0x00, 0x00, 0x00, 0x0F, 0xA2};
static const UInt8 kCoreLSKDPatched[] = {0xC7, 0xC0, 0xC3, 0x06, 0x03, 0x00, 0x66, 0x90};

//! AppleGVAHEVCEncoder model check
static const char kHEVCEncBoardIdOriginal[] = "vendor8bit\0IOService\0board-id";
static const char kHEVCEncBoardIdPatched[] = "vendor8bit\0IOService\0hwgva-id";

/**
 * `VAAcceleratorInfo::identify`
 * AMDRadeonVADriver2.bundle
 * The device info identification fails, as the device id is not present in the function.
 * Patch fallback "error" value (0x12) to Navi 10 (0xC).
 */
static const UInt8 kVAAcceleratorInfoIdentifyOriginal[] = {0x85, 0xC0, 0x74, 0x00, 0xBB, 0x12, 0x00, 0x00, 0x00, 0x89,
    0xD8, 0x48, 0x83, 0xC4, 0x00};
static const UInt8 kVAAcceleratorInfoIdentifyOriginalMask[] = {0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00};
static const UInt8 kVAAcceleratorInfoIdentifyPatched[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00};
static const UInt8 kVAAcceleratorInfoIdentifyPatchedMask[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

//! Ditto; 0xB -> 0x5
static const UInt8 kVAAcceleratorInfoIdentifyVenturaOriginal[] = {0x48, 0xC7, 0x45, 0xF0, 0x18, 0x01, 0x00, 0x00, 0xBB,
    0x0B, 0x00, 0x00, 0x00, 0x83, 0xFE, 0x01, 0x75, 0x00};
static const UInt8 kVAAcceleratorInfoIdentifyVenturaOriginalMask[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00};
static const UInt8 kVAAcceleratorInfoIdentifyVenturaPatched[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x00};
static const UInt8 kVAAcceleratorInfoIdentifyVenturaPatchedMask[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00};

/**
 * `VAFactory::createGraphicsEngine`
 * AMDRadeonVADriver2.bundle
 * Force use GFX 9 variant of the graphics engines
 */
static const UInt8 kVAFactoryCreateGraphicsEngineOriginal[] = {0x48, 0x8B, 0x86, 0x60, 0x04, 0x00, 0x00, 0x8B, 0x40,
    0x0C, 0x83, 0xF8, 0x07, 0x77, 0x00};
static const UInt8 kVAFactoryCreateGraphicsEngineOriginalMask[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00};
static const UInt8 kVAFactoryCreateGraphicsEnginePatched[] = {0xC7, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x66, 0x90, 0x66,
    0x90, 0x00, 0x00, 0x00, 0x00, 0x00};
static const UInt8 kVAFactoryCreateGraphicsEnginePatchedMask[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0x00, 0x00, 0x00, 0x00, 0x00};

//! Ditto
static const UInt8 kVAFactoryCreateGraphicsEngineAndBltVenturaOriginal[] = {0x48, 0x8B, 0x86, 0x60, 0x04, 0x00, 0x00,
    0x8B, 0x40, 0x0C, 0x8D, 0x48, 0xFF, 0x83, 0xF9, 0x02, 0x72, 0x00, 0x8D, 0x48, 0xFD, 0x83, 0xF9, 0x02};
static const UInt8 kVAFactoryCreateGraphicsEngineAndBltVenturaOriginalMask[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
static const UInt8 kVAFactoryCreateGraphicsEngineAndBltVenturaPatched[] = {0xC7, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x66,
    0x90, 0x66, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const UInt8 kVAFactoryCreateGraphicsEngineAndBltVenturaPatchedMask[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

/**
 * `VAFactory::create*VP`
 * AMDRadeonVADriver2.bundle
 * Force use GFX 9 variants of the video processors
 */
static const UInt8 kVAFactoryCreateVPOriginal[] = {0x83, 0xFE, 0x07, 0x77, 0x00, 0x89, 0xF0, 0x48, 0x8D, 0x0D, 0x00,
    0x00, 0x00, 0x00, 0x48, 0x63, 0x04, 0x81, 0x48, 0x01, 0xC8, 0xFF, 0xE0, 0xBF, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x00,
    0x00, 0x00, 0x00};
static const UInt8 kVAFactoryCreateVPOriginalMask[] = {0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
    0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
    0x00, 0x00, 0x00};
static const UInt8 kVAFactoryCreateVPPatched[] = {0xBE, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00};
static const UInt8 kVAFactoryCreateVPPatchedMask[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00};

//! Ditto
static const UInt8 kVAFactoryCreateVPVenturaOriginal[] = {0x8D, 0x46, 0xFF, 0x83, 0xF8, 0x02, 0x72, 0x00, 0x8D, 0x46,
    0xFD, 0x83, 0xF8, 0x02, 0x73, 0x00, 0xBF, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x00, 0x00, 0x00, 0x00};
static const UInt8 kVAFactoryCreateVPVenturaOriginalMask[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00};
static const UInt8 kVAFactoryCreateVPVenturaPatched[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const UInt8 kVAFactoryCreateVPVenturaPatchedMask[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

/**
 * `VAFactory::createImageBlt`
 * AMDRadeonVADriver2.bundle
 * Force use GFX 9 variant of the image blitter
 */
static const UInt8 kVAFactoryCreateImageBltOriginal[] = {0x48, 0x89, 0xF7, 0x48, 0x8B, 0x86, 0x60, 0x04, 0x00, 0x00,
    0x8B, 0x40, 0x0C, 0x48, 0x83, 0xF8, 0x07, 0x77, 0x00, 0x48, 0x8D, 0x0D, 0x00, 0x00, 0x00, 0x00};
static const UInt8 kVAFactoryCreateImageBltMask[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00};
static const UInt8 kVAFactoryCreateImageBltPatched[] = {0x48, 0x89, 0xF7, 0x48, 0xB8, 0x04, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const UInt8 kVAFactoryCreateImageBltPatchedMask[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

/**
 * `VAAddrLibInterface::init`
 * AMDRadeonVADriver2.bundle
 * Remove check for Vega family ID (0x8D) to correctly utilise GFX 9 AddrLib
 */
static const UInt8 kVAAddrLibInterfaceInitOriginal[] = {0x74, 0x00, 0x41, 0x81, 0xFC, 0x8D, 0x00, 0x00, 0x00, 0x75,
    0x00, 0xB8, 0x0D, 0x00, 0x00, 0x00};
static const UInt8 kVAAddrLibInterfaceInitOriginalMask[] = {0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
static const UInt8 kVAAddrLibInterfaceInitPatched[] = {0x00, 0x00, 0x66, 0x90, 0x66, 0x90, 0x66, 0x90, 0x66, 0x90, 0x90,
    0x00, 0x00, 0x00, 0x00, 0x00};
static const UInt8 kVAAddrLibInterfaceInitPatchedMask[] = {0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0x00, 0x00, 0x00, 0x00, 0x00};

/**
 * `Vcn2DecCommand::writeUvdNoOp`
 * AMDRadeonVADriver2.bundle
 */
static const UInt8 kWriteUvdNoOpOriginal[] = {0x48, 0x8B, 0x07, 0xBE, 0x3F, 0x05, 0x00, 0x00, 0xFF, 0x50, 0x20};
static const UInt8 kWriteUvdNoOpPatched[] = {0x48, 0x8B, 0x07, 0xBE, 0xFF, 0x81, 0x00, 0x00, 0xFF, 0x50, 0x20};

/**
 * `Vcn2DecCommand::writeUvdEngineStart`
 * AMDRadeonVADriver2.bundle
 */
static const UInt8 kWriteUvdEngineStartOriginal[] = {0x48, 0x8B, 0x07, 0xBE, 0x06, 0x05, 0x00, 0x00, 0xFF, 0x50, 0x20};
static const UInt8 kWriteUvdEngineStartPatched[] = {0x48, 0x8B, 0x07, 0xBE, 0xC6, 0x81, 0x00, 0x00, 0xFF, 0x50, 0x20};

/**
 * `Vcn2DecCommand::writeUvdGpcomVcpuCmd`
 * AMDRadeonVADriver2.bundle
 */
static const UInt8 kWriteUvdGpcomVcpuCmdOriginal[] = {0x48, 0x8B, 0x07, 0xBE, 0x03, 0x05, 0x00, 0x00, 0xFF, 0x50, 0x20};
static const UInt8 kWriteUvdGpcomVcpuCmdPatched[] = {0x48, 0x8B, 0x07, 0xBE, 0xC3, 0x81, 0x00, 0x00, 0xFF, 0x50, 0x20};

/**
 * `Vcn2DecCommand::writeUvdGpcomVcpuData0`
 * AMDRadeonVADriver2.bundle
 */
static const UInt8 kWriteUvdGpcomVcpuData0Original[] = {0x48, 0x8B, 0x07, 0xBE, 0x04, 0x05, 0x00, 0x00, 0xFF, 0x50,
    0x20};
static const UInt8 kWriteUvdGpcomVcpuData0Patched[] = {0x48, 0x8B, 0x07, 0xBE, 0xC4, 0x81, 0x00, 0x00, 0xFF, 0x50,
    0x20};

/**
 * `Vcn2DecCommand::writeUvdGpcomVcpuData1`
 * AMDRadeonVADriver2.bundle
 */
static const UInt8 kWriteUvdGpcomVcpuData1Original[] = {0x48, 0x8B, 0x07, 0xBE, 0x05, 0x05, 0x00, 0x00, 0xFF, 0x50,
    0x20};
static const UInt8 kWriteUvdGpcomVcpuData1Patched[] = {0x48, 0x8B, 0x07, 0xBE, 0xC5, 0x81, 0x00, 0x00, 0xFF, 0x50,
    0x20};

/**
 * `Vcn2EncCommand::addEncodePacket`
 * AMDRadeonVADriver2.bundle
 */
static const UInt8 kAddEncodePacketOriginal[] = {0x49, 0x89, 0x40, 0x18, 0xBE, 0x0F, 0x00, 0x00, 0x00, 0xBA, 0x2C, 0x00,
    0x00, 0x00};
static const UInt8 kAddEncodePacketPatched[] = {0x49, 0x89, 0x40, 0x18, 0xBE, 0x0B, 0x00, 0x00, 0x00, 0xBA, 0x2C, 0x00,
    0x00, 0x00};

/**
 * `Vcn2EncCommand::addSliceHeaderPacket`
 * AMDRadeonVADriver2.bundle
 */
static const UInt8 kAddSliceHeaderPacketOriginal[] = {0x00, 0x00, 0x00, 0xBE, 0x0B, 0x00, 0x00, 0x00, 0xBA, 0xC0, 0x00,
    0x00, 0x00, 0x00, 0xE9, 0x00, 0x00, 0x00, 0x00};
static const UInt8 kAddSliceHeaderPacketMask[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00};
static const UInt8 kAddSliceHeaderPacketPatched[] = {0x00, 0x00, 0x00, 0xBE, 0x0A, 0x00, 0x00, 0x00, 0xBA, 0xC0, 0x00,
    0x00, 0x00, 0x00, 0xE9, 0x00, 0x00, 0x00, 0x00};

/**
 * `Vcn2EncCommand::addIntraRefreshPacket`
 * AMDRadeonVADriver2.bundle
 */
static const UInt8 kAddIntraRefreshPacketOriginal[] = {0x01, 0x00, 0x00, 0xBE, 0x10, 0x00, 0x00, 0x00, 0xBA, 0x0C, 0x00,
    0x00, 0x00, 0x00, 0xE9, 0x00, 0x00, 0x00, 0x00};
static const UInt8 kAddIntraRefreshPacketMask[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00};
static const UInt8 kAddIntraRefreshPacketPatched[] = {0x01, 0x00, 0x00, 0xBE, 0x0C, 0x00, 0x00, 0x00, 0xBA, 0x0C, 0x00,
    0x00, 0x00, 0x00, 0xE9, 0x00, 0x00, 0x00, 0x00};

/**
 * `Vcn2EncCommand::addContextBufferPacket`
 * AMDRadeonVADriver2.bundle
 */
static const UInt8 kAddContextBufferPacketOriginal[] = {0x49, 0x89, 0x40, 0x18, 0x41, 0xC7, 0x40, 0x14, 0x01, 0x00,
    0x00, 0x00, 0xBE, 0x11, 0x00, 0x00, 0x00, 0xBA, 0x58, 0x02, 0x00, 0x00};
static const UInt8 kAddContextBufferPacketPatched[] = {0x49, 0x89, 0x40, 0x18, 0x41, 0xC7, 0x40, 0x14, 0x01, 0x00, 0x00,
    0x00, 0xBE, 0x0D, 0x00, 0x00, 0x00, 0xBA, 0x58, 0x02, 0x00, 0x00};

/**
 * `Vcn2EncCommand::addBitstreamBufferPacket`
 * AMDRadeonVADriver2.bundle
 */
static const UInt8 kAddBitstreamBufferPacketOriginal[] = {0x48, 0x8B, 0x46, 0x38, 0x49, 0x89, 0x40, 0x18, 0xBE, 0x12,
    0x00, 0x00, 0x00, 0xBA, 0x14, 0x00, 0x00, 0x00};
static const UInt8 kAddBitstreamBufferPacketPatched[] = {0x48, 0x8B, 0x46, 0x38, 0x49, 0x89, 0x40, 0x18, 0xBE, 0x0E,
    0x00, 0x00, 0x00, 0xBA, 0x14, 0x00, 0x00, 0x00};

/**
 * `Vcn2EncCommand::addFeedbackBufferPacket`
 * AMDRadeonVADriver2.bundle
 */
static const UInt8 kAddFeedbackBufferPacketOriginal[] = {0x48, 0x8B, 0x46, 0x40, 0x49, 0x89, 0x40, 0x18, 0xBE, 0x15,
    0x00, 0x00, 0x00, 0xBA, 0x14, 0x00, 0x00, 0x00};
static const UInt8 kAddFeedbackBufferPacketPatched[] = {0x48, 0x8B, 0x46, 0x40, 0x49, 0x89, 0x40, 0x18, 0xBE, 0x10,
    0x00, 0x00, 0x00, 0xBA, 0x14, 0x00, 0x00, 0x00};

/**
 * `Vcn2EncCommand::addInputFormatPacket` and `Vcn2EncCommand::addOutputFormatPacket`
 * AMDRadeonVADriver2.bundle
 * VCN 1 does not have these packets, therefore we make these methods do nothing
 */
static const UInt8 kAddInputFormatPacketOriginal[] = {0x55, 0x48, 0x89, 0xE5, 0x48, 0x8D, 0x8F, 0x80, 0x05, 0x00, 0x00,
    0xBE, 0x0C, 0x00, 0x00, 0x00, 0xBA, 0x1C, 0x00, 0x00, 0x00};
static const UInt8 kAddOutputFormatPacketOriginal[] = {0x55, 0x48, 0x89, 0xE5, 0x48, 0x8D, 0x8F, 0xA0, 0x05, 0x00, 0x00,
    0xBE, 0x0D, 0x00, 0x00, 0x00, 0xBA, 0x10, 0x00, 0x00, 0x00};
static const UInt8 kAddFormatPacketOriginalMask[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
static const UInt8 kAddFormatPacketPatched[] = {0xB8, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const UInt8 kAddFormatPacketPatchedMask[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
